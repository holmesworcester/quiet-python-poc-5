-- signed_groups protocol schema

-- Blocked events table with blocked-by relationships
CREATE TABLE IF NOT EXISTS blocked (
  event_id TEXT PRIMARY KEY,
  blocked_by_id TEXT NOT NULL,
  event_type TEXT NOT NULL,
  data TEXT NOT NULL,  -- JSON of the event data
  metadata TEXT,       -- JSON of the event metadata
  reason TEXT,         -- Human-readable reason for blocking
  created_at_ms INTEGER NOT NULL
);

CREATE INDEX IF NOT EXISTS idx_blocked_by ON blocked (blocked_by_id);

-- Core domain tables (initial SQL migration)

-- Networks
CREATE TABLE IF NOT EXISTS networks (
  id TEXT PRIMARY KEY,
  name TEXT NOT NULL,
  creator_pubkey TEXT NOT NULL,
  first_group_id TEXT,
  created_at_ms INTEGER NOT NULL
);

-- Identities (local identities within this protocol scope)
CREATE TABLE IF NOT EXISTS identities (
  pubkey TEXT PRIMARY KEY,
  privkey TEXT NOT NULL,
  name TEXT,
  created_at_ms INTEGER NOT NULL
);

-- Users (members of the network)
CREATE TABLE IF NOT EXISTS users (
  id TEXT PRIMARY KEY,
  network_id TEXT NOT NULL,
  pubkey TEXT NOT NULL,
  name TEXT,
  group_id TEXT,
  invite_id TEXT,
  created_at_ms INTEGER NOT NULL
);

-- Groups
CREATE TABLE IF NOT EXISTS groups (
  id TEXT PRIMARY KEY,
  name TEXT NOT NULL,
  created_by TEXT NOT NULL,
  created_at_ms INTEGER NOT NULL
);

-- Channels
CREATE TABLE IF NOT EXISTS channels (
  id TEXT PRIMARY KEY,
  network_id TEXT NOT NULL,
  name TEXT NOT NULL,
  created_by TEXT NOT NULL,
  group_id TEXT,
  created_at_ms INTEGER NOT NULL
);

-- Invites (for joining the network)
CREATE TABLE IF NOT EXISTS invites (
  id TEXT PRIMARY KEY,
  invite_pubkey TEXT NOT NULL,
  network_id TEXT NOT NULL,
  group_id TEXT NOT NULL,
  created_by TEXT NOT NULL,
  created_at_ms INTEGER NOT NULL
);

-- Link invites (for linking devices to a user)
CREATE TABLE IF NOT EXISTS link_invites (
  id TEXT PRIMARY KEY,
  link_invite_pubkey TEXT NOT NULL,
  user_id TEXT NOT NULL,
  created_at_ms INTEGER NOT NULL
);

-- Links (device peer linked to user)
CREATE TABLE IF NOT EXISTS links (
  id TEXT PRIMARY KEY,
  peer_id TEXT NOT NULL,
  user_id TEXT NOT NULL,
  link_invite_id TEXT NOT NULL,
  created_at_ms INTEGER NOT NULL
);

-- Adds (add user to group)
CREATE TABLE IF NOT EXISTS adds (
  id TEXT PRIMARY KEY,
  group_id TEXT NOT NULL,
  user_id TEXT NOT NULL,
  added_by TEXT NOT NULL,
  created_at_ms INTEGER NOT NULL
);

-- Messages
CREATE TABLE IF NOT EXISTS messages (
  id TEXT PRIMARY KEY,
  channel_id TEXT NOT NULL,
  author_id TEXT NOT NULL,
  peer_id TEXT NOT NULL,
  user_id TEXT,
  content TEXT NOT NULL,
  created_at_ms INTEGER NOT NULL
);

-- Append-only Event Store (SQL-backed)
-- Stores every processed envelope for durability and replay.
CREATE TABLE IF NOT EXISTS event_store (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  event_id TEXT UNIQUE,              -- May be null if not supplied; generated by framework when available
  event_type TEXT NOT NULL,          -- data.type
  data TEXT NOT NULL,                -- JSON-encoded data
  metadata TEXT NOT NULL,            -- JSON-encoded metadata
  created_at_ms INTEGER NOT NULL -- processing time
);
