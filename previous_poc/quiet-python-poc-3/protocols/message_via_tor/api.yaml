# ===========================================================================================
# Message via Tor Protocol API Specification
# ===========================================================================================
# Purpose: Defines the OpenAPI specification for a minimal P2P messaging network with 
#          Tor-like functionality. This API enables identity management, peer discovery,
#          and message exchange through a simulated Tor network.
#
# Key Concepts:
# - Identities: Local user accounts with cryptographic keypairs
# - Peers: Other participants in the network
# - Messages: Text communications between peers
# - Tor Simulation: Messages are routed through a simulated onion routing network
# ===========================================================================================

$schema: https://spec.openapis.org/oas/3.0/schema/2021-09-28
openapi: 3.0.0

# ===========================================================================================
# API METADATA
# ===========================================================================================
info:
  title: Message via Tor Protocol API
  description: API for a minimal P2P messaging network with Tor-like functionality
  version: 1.0.0

# This API only exposes user-facing operations. Internal operations like
# sync_peers, tor_simulator delivery, and incoming message processing are
# handled by background jobs triggered by the tick endpoint, not exposed
# directly as API endpoints.

# ===========================================================================================
# API ENDPOINTS
# ===========================================================================================
paths:
  # =========================================================================================
  # IDENTITY MANAGEMENT
  # =========================================================================================
  
  # -----------------------------------------------------------------------------------------
  # Create and List Identities
  # -----------------------------------------------------------------------------------------
  /identities:
    post:
      summary: Create a new identity
      operationId: identity.create
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: []  # No required fields - name is optional
              properties:
                name:
                  type: string
                  description: Optional name for the identity
      responses:
        201:
          description: Identity created successfully
          content:
            application/json:
              schema:
                type: object
                required: [identityId, publicKey]
                properties:
                  identityId:
                    type: string
                  publicKey:
                    type: string
    
    get:
      summary: List all identities
      operationId: identity.list
      responses:
        200:
          description: List of identities
          content:
            application/json:
              schema:
                type: object
                required: [identities]
                properties:
                  identities:
                    type: array
                    items:
                      type: object
                      required: [identityId, publicKey]
                      properties:
                        identityId:
                          type: string
                        publicKey:
                          type: string
                        name:
                          type: string

  # -----------------------------------------------------------------------------------------
  # Invite Generation
  # -----------------------------------------------------------------------------------------
  /identities/{identityId}/invite:
    post:
      summary: Create an invite link
      operationId: identity.invite
      parameters:
        - name: identityId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Invite link created
          content:
            application/json:
              schema:
                type: object
                required: [inviteLink]
                properties:
                  inviteLink:
                    type: string

  # -----------------------------------------------------------------------------------------
  # Network Joining
  # -----------------------------------------------------------------------------------------
  /join:
    post:
      summary: Join network using invite link
      operationId: identity.join
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [inviteLink]
              properties:
                inviteLink:
                  type: string
                name:
                  type: string
                  description: Optional name for the new identity
      responses:
        201:
          description: Successfully joined network
          content:
            application/json:
              schema:
                type: object
                required: [identityId, publicKey]
                properties:
                  identityId:
                    type: string
                  publicKey:
                    type: string

  # =========================================================================================
  # MESSAGING
  # =========================================================================================
  
  # -----------------------------------------------------------------------------------------
  # Message Creation
  # -----------------------------------------------------------------------------------------
  /messages:
    post:
      summary: Create a new message
      operationId: message.create
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [text, senderId]
              properties:
                text:
                  type: string
                senderId:
                  type: string
                  description: The identity ID (pubkey) of the sender
                recipientPeerId:
                  type: string
                  description: Optional recipient peer ID
      responses:
        201:
          description: Message created
          content:
            application/json:
              schema:
                type: object
                required: [messageId, text]
                properties:
                  messageId:
                    type: string
                  text:
                    type: string

  # -----------------------------------------------------------------------------------------
  # Message Retrieval
  # -----------------------------------------------------------------------------------------
  /messages/{peerId}:
    get:
      summary: List messages for a peer
      operationId: message.list
      parameters:
        - name: peerId
          in: path
          required: true
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            default: 50  # Default pagination limit
      responses:
        200:
          description: List of messages
          content:
            application/json:
              schema:
                type: object
                required: [messages]
                properties:
                  messages:
                    type: array
                    items:
                      type: object
                      required: [messageId, text, timestamp, sender]
                      properties:
                        messageId:
                          type: string
                        text:
                          type: string
                        timestamp:
                          type: integer
                        sender:
                          type: string

  # =========================================================================================
  # PEER MANAGEMENT
  # =========================================================================================
  
  # -----------------------------------------------------------------------------------------
  # Peer Creation
  # -----------------------------------------------------------------------------------------
  /peers:
    post:
      summary: Create a new peer
      operationId: peer.create
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [publicKey]
              properties:
                publicKey:
                  type: string
                name:
                  type: string
      responses:
        201:
          description: Peer created
          content:
            application/json:
              schema:
                type: object
                required: [peerId]
                properties:
                  peerId:
                    type: string

  # =========================================================================================
  # BACKGROUND JOB PROCESSING
  # =========================================================================================
  
  # -----------------------------------------------------------------------------------------
  # Tick Cycle - Processes All Background Tasks
  # -----------------------------------------------------------------------------------------
  /tick:
    post:
      summary: Run a tick cycle to process background jobs
      description: |
        Triggers all background jobs including:
        - sync_peers.sync_all - Synchronizes peer information
        - tor_simulator.deliver - Simulates Tor network delivery  
        - incoming.process_incoming - Processes incoming messages
        - unknown.purge_old - Cleans up old unknown events
      operationId: tick.run
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                time_now_ms:
                  type: integer
                  description: Current timestamp in milliseconds
      responses:
        200:
          description: Tick completed
          content:
            application/json:
              schema:
                type: object
                properties:
                  jobsRun:
                    type: integer
                    description: Number of jobs executed
                  eventsProcessed:
                    type: integer
                    description: Number of events processed

  # =========================================================================================
  # EVENT STORE
  # =========================================================================================
  
  # -----------------------------------------------------------------------------------------
  # List Events from Protocol Event Store
  # -----------------------------------------------------------------------------------------
  /events:
    get:
      summary: List events from the protocol's event store
      operationId: event_store.list
      parameters:
        - name: limit
          in: query
          description: Maximum number of events to return
          schema:
            type: integer
            default: 100
        - name: order_desc
          in: query
          description: Whether to order by newest first (default true)
          schema:
            type: boolean
            default: true
      responses:
        200:
          description: List of events
          content:
            application/json:
              schema:
                type: object
                required: [events]
                properties:
                  events:
                    type: array
                    items:
                      type: object
                      required: [pubkey, payload, metadata, event_type, event_id, created_at]
                      properties:
                        pubkey:
                          type: string
                        payload:
                          type: object
                        metadata:
                          type: object
                        event_type:
                          type: string
                        event_id:
                          type: string
                        created_at:
                          type: integer

  # =========================================================================================
  # DATABASE SNAPSHOT
  # =========================================================================================
  
  # -----------------------------------------------------------------------------------------
  # Get Database Snapshot
  # -----------------------------------------------------------------------------------------
  /snapshot:
    get:
      summary: Get database snapshot
      operationId: snapshot.get
      tags:
        - Debug
      responses:
        200:
          description: Database snapshot retrieved successfully
          content:
            application/json:
              schema:
                type: object
                required: [status]
                properties:
                  status:
                    type: string
                  structured:
                    type: object
                  sql_dump:
                    type: string