{
  "type": "message",
  "projector": {
    "description": "Validates sig using metadata, adds to state.messages if valid; if selfGenerated, encrypts and adds to outgoing.",
    "func": "projector.project",
    "tests": [
      {
        "given": {
          "db": {
            "messages": []
          },
          "envelope": {
            "metadata": {
              "selfGenerated": true,
              "received_by": "alice_pub"
            },
            "payload": {
              "type": "message",
              "text": "Hello",
              "sender": "alice_pub",
              "sig": "abc"
            }
          }
        },
        "then": {
          "snapshot": {
            "messages": [
              {
                "text": "Hello",
                "sender": "alice_pub",
                "received_by": "alice_pub",
                "*": "*"
              }
            ],
            "event_store": [
              {
                "*": "*"
              }
            ]
          }
        }
      },
      {
        "given": {
          "db": {
            "peers": [
              {
                "pubkey": "sender1",
                "name": "Sender 1",
                "received_by": "test_identity"
              }
            ],
            "messages": [],
            "identities": [
              {
                "pubkey": "test_identity",
                "privkey": "test_privkey",
                "name": "Test Identity"
              }
            ]
          },
          "envelope": {
            "metadata": {
              "eventId": "event123",
              "received_by": "test_identity"
            },
            "payload": {
              "type": "message",
              "text": "World",
              "sender": "sender1",
              "sig": "def"
            }
          }
        },
        "then": {
          "snapshot": {
            "messages": [
              {
                "text": "World",
                "sender": "sender1",
                "received_by": "test_identity",
                "*": "*"
              }
            ],
            "event_store": [
              {
                "*": "*"
              }
            ]
          }
        }
      },
      {
        "description": "Message from unknown sender (no peers) should be stored with unknown_peer flag",
        "given": {
          "db": {
            "peers": [],
            "messages": []
          },
          "envelope": {
            "metadata": {},
            "payload": {
              "type": "message",
              "text": "Unknown",
              "sender": "unknown_sender"
            }
          }
        },
        "then": {
          "snapshot": {
            "messages": [
              {
                "text": "Unknown",
                "sender": "unknown_sender",
                "unknown_peer": true,
                "*": "*"
              }
            ]
          }
        }
      },
      {
        "description": "Self-generated message should be stored with received_by set to sender",
        "given": {
          "db": {
            "messages": []
          },
          "envelope": {
            "metadata": {
              "selfGenerated": true
            },
            "payload": {
              "type": "message",
              "text": "Hello",
              "sender": "peerA",
              "sig": "abc"
            }
          }
        },
        "then": {
          "snapshot": {
            "messages": [
              {
                "text": "Hello",
                "sender": "peerA",
                "received_by": "peerA",
                "*": "*"
              }
            ]
          }
        }
      },
      {
        "description": "Message from known sender should be stored normally",
        "given": {
          "db": {
            "messages": [],
            "peers": [
              {
                "pubkey": "peerA",
                "name": "Peer A",
                "received_by": "peerB"
              }
            ],
            "identities": [
              {
                "pubkey": "peerB",
                "privkey": "peerB_priv",
                "name": "Peer B"
              }
            ]
          },
          "envelope": {
            "metadata": {
              "received_by": "peerB"
            },
            "payload": {
              "type": "message",
              "text": "Hi",
              "sender": "peerA",
              "sig": "def"
            }
          }
        },
        "then": {
          "snapshot": {
            "messages": [
              {
                "text": "Hi",
                "sender": "peerA",
                "received_by": "peerB",
                "*": "*"
              }
            ]
          }
        }
      },
      {
        "description": "Projector should ignore messages lacking text/content (with known sender)",
        "given": {
          "db": {
            "messages": [],
            "peers": [
              {
                "pubkey": "peerA",
                "name": "Peer A",
                "received_by": "peerB"
              }
            ]
          },
          "envelope": {
            "metadata": {
              "received_by": "peerB"
            },
            "payload": {
              "type": "message",
              "sender": "peerA"
            }
          }
        },
        "then": {
          "snapshot": {
            "messages": []
          }
        }
      },
      {
        "description": "Projector should not add to outgoing for non-self-generated messages (with known sender)",
        "given": {
          "db": {
            "messages": [],
            "outgoing": [],
            "peers": [
              {
                "pubkey": "peerA",
                "name": "Peer A",
                "received_by": "peerB"
              }
            ],
            "identities": [
              {
                "pubkey": "peerB",
                "privkey": "peerB_priv",
                "name": "Peer B"
              }
            ]
          },
          "envelope": {
            "metadata": {
              "selfGenerated": false,
              "received_by": "peerB"
            },
            "payload": {
              "type": "message",
              "text": "External",
              "sender": "peerA",
              "sig": "xyz"
            }
          }
        },
        "then": {
          "snapshot": {
            "messages": [
              {
                "text": "External",
                "sender": "peerA",
                "received_by": "peerB",
                "*": "*"
              }
            ],
            "outgoing": []
          }
        }
      },
      {
        "description": "Message from unknown peer should be marked as unknown-peer",
        "given": {
          "db": {
            "messages": [],
            "peers": []
          },
          "envelope": {
            "metadata": {},
            "payload": {
              "type": "message",
              "text": "Hello from unknown",
              "sender": "unknown_pub",
              "sig": "xyz"
            }
          }
        },
        "then": {
          "snapshot": {
            "messages": [
              {
                "text": "Hello from unknown",
                "sender": "unknown_pub",
                "unknown_peer": true,
                "*": "*"
              }
            ]
          }
        }
      },
      {
        "description": "Message from known peer should not be marked as unknown-peer",
        "given": {
          "db": {
            "messages": [],
            "peers": [
              {
                "pubkey": "known_pub",
                "name": "Known Peer",
                "received_by": "test_identity"
              }
            ],
            "identities": [
              {
                "pubkey": "test_identity",
                "privkey": "test_privkey",
                "name": "Test Identity"
              }
            ]
          },
          "envelope": {
            "metadata": {
              "received_by": "test_identity"
            },
            "payload": {
              "type": "message",
              "text": "Hello from known",
              "sender": "known_pub",
              "sig": "abc"
            }
          }
        },
        "then": {
          "snapshot": {
            "messages": [
              {
                "text": "Hello from known",
                "sender": "known_pub",
                "received_by": "test_identity",
                "*": "*"
              }
            ]
          }
        }
      },
      {
        "description": "Message should be marked as unknown_peer when sender is not known to the specific recipient",
        "given": {
          "db": {
            "messages": [],
            "peers": [
              {
                "pubkey": "peer1",
                "name": "Peer 1",
                "received_by": "identity1"
              },
              {
                "pubkey": "peer2",
                "name": "Peer 2",
                "received_by": "identity2"
              }
            ],
            "identities": [
              {
                "pubkey": "identity1",
                "privkey": "priv1",
                "name": "Identity 1"
              },
              {
                "pubkey": "identity2",
                "privkey": "priv2",
                "name": "Identity 2"
              }
            ]
          },
          "envelope": {
            "metadata": {
              "received_by": "identity2"
            },
            "payload": {
              "type": "message",
              "text": "Hello from peer1",
              "sender": "peer1",
              "sig": "xyz"
            }
          }
        },
        "then": {
          "snapshot": {
            "messages": [
              {
                "text": "Hello from peer1",
                "sender": "peer1",
                "received_by": "identity2",
                "unknown_peer": true,
                "*": "*"
              }
            ]
          }
        }
      }
    ]
  },
  "commands": {
    "create": {
      "description": "Creates canonical signed event and broadcasts to all known peers.",
      "func": "create.execute",
      "tests": [
        {
          "description": "Message with no known peers",
          "given": {
            "db": {
              "peers": [],
              "identities": [
                {
                  "pubkey": "test_pubkey",
                  "privkey": "test_privkey",
                  "name": "Test"
                }
              ]
            },
            "params": {
              "text": "Hello",
              "senderId": "test_pubkey"
            },
            "env": {
              "CRYPTO_MODE": "dummy"
            }
          },
          "then": {
            "return": {
              "api_response": {
                "return": "Message broadcast to 0 peers",
                "messageId": "*",
                "sentTo": 0
              },
              "newEvents": [
                {
                  "type": "message",
                  "text": "Hello",
                  "sig": "*"
                }
              ]
            }
          }
        },
        {
          "description": "Message broadcast to all known peers",
          "given": {
            "db": {
              "identities": [
                {
                  "pubkey": "dummy_pubkey_sender",
                  "privkey": "dummy_privkey_sender",
                  "name": "Sender"
                }
              ],
              "peers": [
                {
                  "pubkey": "peer1",
                  "name": "Peer 1",
                  "received_by": "dummy_pubkey_sender"
                },
                {
                  "pubkey": "peer2",
                  "name": "Peer 2",
                  "received_by": "dummy_pubkey_sender"
                },
                {
                  "pubkey": "dummy_pubkey_sender",
                  "name": "Self",
                  "received_by": "dummy_pubkey_sender"
                }
              ]
            },
            "params": {
              "text": "Hello peers",
              "senderId": "dummy_pubkey_sender"
            },
            "env": {
              "CRYPTO_MODE": "dummy"
            }
          },
          "then": {
            "return": {
              "api_response": {
                "return": "Message broadcast to 2 peers",
                "messageId": "*",
                "sentTo": 2
              },
              "newEvents": [
                {
                  "type": "message",
                  "text": "Hello peers",
                  "sig": "*"
                }
              ]
            },
            "snapshot": {
              "outgoing": [
                {
                  "recipient": "peer1",
                  "*": "*"
                },
                {
                  "recipient": "peer2",
                  "*": "*"
                }
              ]
            }
          }
        },
        {
          "description": "Message broadcast to peers is delivered after ticks",
          "given": {
            "db": {
              "identities": [
                {
                  "pubkey": "dummy_pubkey_alice",
                  "privkey": "dummy_privkey_alice",
                  "name": "Alice"
                }
              ],
              "peers": [
                {
                  "pubkey": "bob_pub",
                  "name": "Bob",
                  "received_by": "dummy_pubkey_alice"
                },
                {
                  "pubkey": "charlie_pub",
                  "name": "Charlie",
                  "received_by": "dummy_pubkey_alice"
                }
              ],
              "messages": []
            },
            "params": {
              "text": "Hello via ticks",
              "senderId": "dummy_pubkey_alice",
              "time_now_ms": 1000
            },
            "env": {
              "CRYPTO_MODE": "dummy"
            }
          },
          "ticks": 2,
          "then": {
            "return": {
              "api_response": {
                "return": "Message broadcast to 2 peers",
                "messageId": "*",
                "sentTo": 2
              }
            },
            "snapshot": {
              "outgoing": []
            }
          }
        }
      ]
    },
    "list": {
      "description": "Lists all messages for a given peer",
      "func": "list.execute",
      "tests": [
        {
          "given": {
            "db": {
              "messages": [
                {
                  "text": "Hi",
                  "sender": "peer1",
                  "recipient": "peer2",
                  "timestamp": 100,
                  "received_by": "peer1"
                },
                {
                  "text": "Hello",
                  "sender": "peer2",
                  "recipient": "peer1",
                  "timestamp": 200,
                  "received_by": "peer1"
                }
              ]
            },
            "params": {
              "peerId": "peer1"
            }
          },
          "then": {
            "return": {
              "api_response": {
                "return": "Found 2 messages",
                "messages": [
                  {
                    "text": "Hi",
                    "sender": "peer1",
                    "recipient": "peer2",
                    "timestamp": 100
                  },
                  {
                    "text": "Hello",
                    "sender": "peer2",
                    "recipient": "peer1",
                    "timestamp": 200
                  }
                ]
              }
            }
          }
        },
        {
          "description": "List should exclude messages marked as unknown_peer",
          "given": {
            "db": {
              "messages": [
                {
                  "text": "Hi",
                  "sender": "peer1",
                  "recipient": "peer2",
                  "timestamp": 100,
                  "received_by": "peer1"
                },
                {
                  "text": "Unknown message",
                  "sender": "unknown1",
                  "recipient": "peer1",
                  "timestamp": 150,
                  "unknown_peer": true,
                  "received_by": "peer1"
                },
                {
                  "text": "Hello",
                  "sender": "peer2",
                  "recipient": "peer1",
                  "timestamp": 200,
                  "received_by": "peer1"
                }
              ]
            },
            "params": {
              "peerId": "peer1"
            }
          },
          "then": {
            "return": {
              "api_response": {
                "return": "Found 2 messages",
                "messages": [
                  {
                    "text": "Hi",
                    "sender": "peer1",
                    "recipient": "peer2",
                    "timestamp": 100
                  },
                  {
                    "text": "Hello",
                    "sender": "peer2",
                    "recipient": "peer1",
                    "timestamp": 200
                  }
                ]
              }
            }
          }
        }
      ]
    }
  }
}
