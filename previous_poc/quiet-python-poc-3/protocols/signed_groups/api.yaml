# ===========================================================================================
# Signed Groups Protocol API Specification
# ===========================================================================================
# Purpose: Defines the OpenAPI specification for a secure group messaging protocol with
#          cryptographic signatures and access control. This API enables identity management,
#          network creation, group management, and secure messaging.
#
# Key Concepts:
# - Identities: Local user accounts with cryptographic keypairs
# - Networks: Isolated communication spaces with their own users and channels
# - Groups: Access control units that users can join
# - Channels: Communication channels within groups
# - Messages: Signed messages sent within channels
# ===========================================================================================

$schema: https://spec.openapis.org/oas/3.0/schema/2021-09-28
openapi: 3.0.0

# ===========================================================================================
# API METADATA
# ===========================================================================================
info:
  title: Signed Groups Protocol API
  description: API for secure group messaging with cryptographic signatures
  version: 1.0.0

# This API exposes user-facing operations for the signed groups protocol.
# Background operations like event processing and signature validation are
# handled internally by the protocol handlers.

# ===========================================================================================
# API ENDPOINTS
# ===========================================================================================
paths:
  # =========================================================================================
  # IDENTITY MANAGEMENT
  # =========================================================================================
  
  # -----------------------------------------------------------------------------------------
  # Create and List Identities
  # -----------------------------------------------------------------------------------------
  /identities:
    post:
      summary: Create a new identity
      operationId: identity.create
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name]
              properties:
                name:
                  type: string
                  description: Name for the identity
      responses:
        201:
          description: Identity created successfully
          content:
            application/json:
              schema:
                type: object
                required: [identityId, publicKey, name]
                properties:
                  identityId:
                    type: string
                    description: The public key of the identity
                  publicKey:
                    type: string
                  name:
                    type: string
    
    get:
      summary: List all identities
      operationId: identity.list
      responses:
        200:
          description: List of identities
          content:
            application/json:
              schema:
                type: object
                required: [identities]
                properties:
                  identities:
                    type: array
                    items:
                      type: object
                      required: [pubkey, name]
                      properties:
                        pubkey:
                          type: string
                        name:
                          type: string

  # =========================================================================================
  # NETWORK MANAGEMENT
  # =========================================================================================
  
  # -----------------------------------------------------------------------------------------
  # Create and List Networks
  # -----------------------------------------------------------------------------------------
  /networks:
    post:
      summary: Create a new network
      operationId: network.create
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, identityId]
              properties:
                name:
                  type: string
                  description: Name for the network
                identityId:
                  type: string
                  description: Identity creating the network
      responses:
        201:
          description: Network created successfully
          content:
            application/json:
              schema:
                type: object
                required: [networkId, name, firstGroupId, defaultChannelId]
                properties:
                  networkId:
                    type: string
                  name:
                    type: string
                  firstGroupId:
                    type: string
                    description: ID of the default "General" group
                  defaultChannelId:
                    type: string
                    description: ID of the default channel in the General group
    
    get:
      summary: List all networks
      operationId: network.list
      responses:
        200:
          description: List of networks
          content:
            application/json:
              schema:
                type: object
                required: [networks]
                properties:
                  networks:
                    type: array
                    items:
                      type: object
                      required: [id, name, creator_pubkey]
                      properties:
                        id:
                          type: string
                        name:
                          type: string
                        creator_pubkey:
                          type: string

  # =========================================================================================
  # USER MANAGEMENT
  # =========================================================================================
  
  # -----------------------------------------------------------------------------------------
  # Join Network
  # -----------------------------------------------------------------------------------------
  /users/join:
    post:
      summary: Join a network using an invite
      operationId: user.join
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [inviteLink, identityId]
              properties:
                inviteLink:
                  type: string
                  description: Invite link to join the network
                identityId:
                  type: string
                  description: Identity joining the network
      responses:
        201:
          description: Successfully joined network
          content:
            application/json:
              schema:
                type: object
                required: [userId, networkId]
                properties:
                  userId:
                    type: string
                  networkId:
                    type: string
                  accessibleChannels:
                    type: array
                    description: List of channels the user can access
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        name:
                          type: string
                        group_id:
                          type: string
                  defaultChannelId:
                    type: string
                    description: ID of the default channel to select (usually 'general')
  
  # -----------------------------------------------------------------------------------------
  # List Users
  # -----------------------------------------------------------------------------------------
  /users:
    get:
      summary: List users
      operationId: user.list
      parameters:
        - name: network_id
          in: query
          schema:
            type: string
          description: Filter users by network
      responses:
        200:
          description: List of users
          content:
            application/json:
              schema:
                type: object
                required: [users]
                properties:
                  users:
                    type: array
                    items:
                      type: object
                      required: [id, pubkey, network_id, name]
                      properties:
                        id:
                          type: string
                        pubkey:
                          type: string
                        network_id:
                          type: string
                        name:
                          type: string
                        group_id:
                          type: string

  # =========================================================================================
  # GROUP MANAGEMENT
  # =========================================================================================
  
  # -----------------------------------------------------------------------------------------
  # Create and List Groups
  # -----------------------------------------------------------------------------------------
  /groups:
    post:
      summary: Create a new group
      operationId: group.create
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, user_id]
              properties:
                name:
                  type: string
                  description: Name for the group
                user_id:
                  type: string
                  description: User creating the group
      responses:
        201:
          description: Group created successfully
          content:
            application/json:
              schema:
                type: object
                required: [groupId]
                properties:
                  groupId:
                    type: string
    
    get:
      summary: List groups
      operationId: group.list
      parameters:
        - name: network_id
          in: query
          schema:
            type: string
          description: Filter groups by network (via user membership)
      responses:
        200:
          description: List of groups
          content:
            application/json:
              schema:
                type: object
                required: [groups]
                properties:
                  groups:
                    type: array
                    items:
                      type: object
                      required: [id, name, created_by]
                      properties:
                        id:
                          type: string
                        name:
                          type: string
                        created_by:
                          type: string

  # =========================================================================================
  # GROUP MEMBERSHIP
  # =========================================================================================
  
  # -----------------------------------------------------------------------------------------
  # Add User to Group
  # -----------------------------------------------------------------------------------------
  /group-memberships:
    post:
      summary: Add a user to a group
      operationId: add.create
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [user_id, group_id, added_by]
              properties:
                user_id:
                  type: string
                  description: User to add to the group
                group_id:
                  type: string
                  description: Group to add user to
                added_by:
                  type: string
                  description: User performing the add operation
      responses:
        201:
          description: User added to group successfully

  # =========================================================================================
  # CHANNEL MANAGEMENT
  # =========================================================================================
  
  # -----------------------------------------------------------------------------------------
  # Create and List Channels
  # -----------------------------------------------------------------------------------------
  /channels:
    post:
      summary: Create a new channel
      operationId: channel.create
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, network_id, user_id, group_id]
              properties:
                name:
                  type: string
                  description: Name for the channel
                network_id:
                  type: string
                  description: Network the channel belongs to
                user_id:
                  type: string
                  description: User creating the channel
                group_id:
                  type: string
                  description: Group the channel belongs to
      responses:
        201:
          description: Channel created successfully
          content:
            application/json:
              schema:
                type: object
                required: [channelId]
                properties:
                  channelId:
                    type: string
    
    get:
      summary: List channels
      operationId: channel.list
      parameters:
        - name: network_id
          in: query
          schema:
            type: string
          description: Filter channels by network
      responses:
        200:
          description: List of channels
          content:
            application/json:
              schema:
                type: object
                required: [channels]
                properties:
                  channels:
                    type: array
                    items:
                      type: object
                      required: [id, name, network_id, group_id, created_by]
                      properties:
                        id:
                          type: string
                        name:
                          type: string
                        network_id:
                          type: string
                        group_id:
                          type: string
                        created_by:
                          type: string

  # =========================================================================================
  # MESSAGING
  # =========================================================================================
  
  # -----------------------------------------------------------------------------------------
  # Create Messages
  # -----------------------------------------------------------------------------------------
  /messages:
    post:
      summary: Create a new message
      operationId: message.create
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [channel_id, user_id, peer_id, content]
              properties:
                channel_id:
                  type: string
                  description: Channel to send message to
                user_id:
                  type: string
                  description: User sending the message
                peer_id:
                  type: string
                  description: Peer/device ID (can be same as user_id)
                content:
                  type: string
                  description: Message content
      responses:
        201:
          description: Message created
          content:
            application/json:
              schema:
                type: object
                required: [messageId, channelId]
                properties:
                  messageId:
                    type: string
                  channelId:
                    type: string
    
    get:
      summary: List messages
      operationId: message.list
      parameters:
        - name: channel_id
          in: query
          required: true
          schema:
            type: string
          description: Channel to get messages from
        - name: limit
          in: query
          schema:
            type: integer
            default: 100
      responses:
        200:
          description: List of messages
          content:
            application/json:
              schema:
                type: object
                required: [messages]
                properties:
                  messages:
                    type: array
                    items:
                      type: object
                      required: [id, channel_id, user_id, content, created_at_ms]
                      properties:
                        id:
                          type: string
                        channel_id:
                          type: string
                        user_id:
                          type: string
                        peer_id:
                          type: string
                        content:
                          type: string
                        created_at_ms:
                          type: integer
                        author_id:
                          type: string

  # =========================================================================================
  # INVITATIONS
  # =========================================================================================
  
  # -----------------------------------------------------------------------------------------
  # Create Invites
  # -----------------------------------------------------------------------------------------
  /invites:
    post:
      summary: Create an invite link
      operationId: invite.create
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [identityId]
              properties:
                identityId:
                  type: string
                  description: Identity creating the invite
      responses:
        201:
          description: Invite created
          content:
            application/json:
              schema:
                type: object
                required: [inviteLink]
                properties:
                  inviteLink:
                    type: string
    
    get:
      summary: List invites
      operationId: invite.list
      responses:
        200:
          description: List of invites
          content:
            application/json:
              schema:
                type: object
                required: [invites]
                properties:
                  invites:
                    type: array
                    items:
                      type: object
                      required: [id, invite_pubkey, network_id, group_id, created_by]
                      properties:
                        id:
                          type: string
                        invite_pubkey:
                          type: string
                        network_id:
                          type: string
                        group_id:
                          type: string
                        created_by:
                          type: string

  # =========================================================================================
  # EVENT STORE
  # =========================================================================================
  
  # -----------------------------------------------------------------------------------------
  # List Events from Protocol Event Store
  # -----------------------------------------------------------------------------------------
  /events:
    get:
      summary: List events from the protocol's event store
      operationId: event_store.list
      parameters:
        - name: limit
          in: query
          description: Maximum number of events to return
          schema:
            type: integer
            default: 100
        - name: order_desc
          in: query
          description: Whether to order by newest first (default true)
          schema:
            type: boolean
            default: true
      responses:
        200:
          description: List of events
          content:
            application/json:
              schema:
                type: object
                required: [events]
                properties:
                  events:
                    type: array
                    items:
                      type: object
                      required: [pubkey, payload, metadata, event_type, event_id, created_at]
                      properties:
                        pubkey:
                          type: string
                        payload:
                          type: object
                        metadata:
                          type: object
                        event_type:
                          type: string
                        event_id:
                          type: string
                        created_at:
                          type: integer

  # =========================================================================================
  # DATABASE SNAPSHOT
  # =========================================================================================
  
  # -----------------------------------------------------------------------------------------
  # Get Database Snapshot
  # -----------------------------------------------------------------------------------------
  /snapshot:
    get:
      summary: Get database snapshot
      operationId: snapshot.get
      tags:
        - Debug
      responses:
        200:
          description: Database snapshot retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  structured:
                    type: object
                  sql_dump:
                    type: string

  # =========================================================================================
  # BACKGROUND JOB PROCESSING
  # =========================================================================================
  
  # -----------------------------------------------------------------------------------------
  # Tick Cycle - Processes All Background Tasks
  # -----------------------------------------------------------------------------------------
  /tick:
    post:
      summary: Run a tick cycle to process background jobs
      description: |
        Triggers all background jobs for the signed groups protocol
      operationId: tick.run
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                time_now_ms:
                  type: integer
                  description: Current timestamp in milliseconds
      responses:
        200:
          description: Tick completed
          content:
            application/json:
              schema:
                type: object
                properties:
                  jobsRun:
                    type: integer
                    description: Number of jobs executed
                  eventsProcessed:
                    type: integer
                    description: Number of events processed

