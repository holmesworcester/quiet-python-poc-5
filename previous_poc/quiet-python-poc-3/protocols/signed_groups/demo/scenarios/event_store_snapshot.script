# Test event store and snapshot functionality for signed_groups

# Create an identity
POST /identities {"name": "alice"}
EXPECT 201
CAPTURE alice_id $.identityId

# Create a network
POST /networks {"name": "test-network", "identityId": "${alice_id}"}
EXPECT 201
CAPTURE network_id $.networkId
CAPTURE user_id $.userId
CAPTURE group_id $.firstGroupId
CAPTURE channel_id $.defaultChannelId

# Send a message to generate more events
POST /messages {"channel_id": "${channel_id}", "user_id": "${user_id}", "peer_id": "${user_id}", "content": "Test message"}
EXPECT 201

# Check event store - should have identity, network, user, group, channel, and message events
GET /events?limit=20
EXPECT 200
EXPECT_BODY_CONTAINS "identity"
EXPECT_BODY_CONTAINS "network"
EXPECT_BODY_CONTAINS "user"
EXPECT_BODY_CONTAINS "group"
EXPECT_BODY_CONTAINS "channel"
EXPECT_BODY_CONTAINS "message"

# Get database snapshot
GET /snapshot
EXPECT 200
CAPTURE snapshot $.structured
CAPTURE sql_dump $.sql_dump

# Verify snapshot contains expected tables as arrays
EXPECT_VAR snapshot.identities TRUTHY
EXPECT_VAR snapshot.networks TRUTHY
EXPECT_VAR snapshot.users TRUTHY
EXPECT_VAR snapshot.groups TRUTHY
EXPECT_VAR snapshot.channels TRUTHY
EXPECT_VAR snapshot.messages TRUTHY
# Event store excluded from snapshot (has its own display)
EXPECT_VAR snapshot.event_store FALSY
# Verify they are arrays, not objects with columns/rows
EXPECT_VAR snapshot.identities[0] TRUTHY
EXPECT_VAR snapshot.networks[0] TRUTHY
EXPECT_VAR snapshot.users[0] TRUTHY
EXPECT_VAR snapshot.groups[0] TRUTHY
EXPECT_VAR snapshot.channels[0] TRUTHY
EXPECT_VAR snapshot.messages[0] TRUTHY

# Verify SQL dump contains CREATE TABLE and INSERT statements
EXPECT_VAR sql_dump CONTAINS "CREATE TABLE"
EXPECT_VAR sql_dump CONTAINS "identities"
EXPECT_VAR sql_dump CONTAINS "networks"
EXPECT_VAR sql_dump CONTAINS "INSERT INTO"